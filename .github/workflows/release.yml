name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's New in ${{ github.ref }}
            
            See the [CHANGELOG.md](CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ### Quick Start
            ```bash
            git clone https://github.com/your-username/catred_config.git
            cd catred_config
            ./scripts/install/bootstrap.sh
            ```
            
            ### Manual Installation
            1. Download and extract the release archive
            2. Run the installation script for your platform:
               - macOS: `./scripts/install/macos-install.sh`
               - Linux: `./scripts/install/linux-install.sh`
               - Windows: `./scripts/install/windows-install.ps1`
            
            ## Supported Platforms
            
            - ✅ **macOS** (Apple Silicon and Intel)
            - ✅ **Linux** (Ubuntu, Fedora, Arch)
            - ✅ **Windows** (Windows 10/11)
            
            ## Features
            
            - 🎨 **3 Beautiful Themes**: Catppuccin Macchiato, Gruvbox, Tokyo Night Storm
            - 🖥️ **Cross-Platform**: Consistent experience across all platforms
            - ⚡ **Unified CLI**: Simple `catred` command for all operations
            - 🔧 **Complete Environment**: Terminals, editors, window managers, status bars
            - 🛡️ **Safe Installation**: Automatic backups and rollback capabilities
            
            ## Post-Installation
            
            After installation, verify everything is working:
            ```bash
            ./scripts/catred health
            ```
            
            Switch themes easily:
            ```bash
            ./scripts/catred theme gruvbox
            ./scripts/catred theme tokyo-night-storm
            ```
            
            ## Support
            
            - 📖 [Documentation](docs/)
            - 🐛 [Issues](https://github.com/your-username/catred_config/issues)
            - 💬 [Discussions](https://github.com/your-username/catred_config/discussions)
          draft: false
          prerelease: false

  # Test Release on Multiple Platforms
  test-release:
    name: Test Release
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up test environment (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y stow
      
      - name: Set up test environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install stow
      
      - name: Test installation scripts exist
        run: |
          test -f scripts/install/bootstrap.sh
          test -f scripts/install/macos-install.sh
          test -f scripts/install/linux-install.sh
          test -f scripts/install/windows-install.ps1
        shell: bash
      
      - name: Test theme system
        run: |
          test -d configs/catppuccin-macchiato
          test -d configs/gruvbox
          test -d configs/tokyo-night-storm
          
          # Test theme files exist
          test -f configs/catppuccin-macchiato/colors.yaml
          test -f configs/gruvbox/colors.yaml
          test -f configs/tokyo-night-storm/colors.yaml
        shell: bash
      
      - name: Test CLI functionality
        run: |
          # Test catred CLI exists and is executable
          test -x scripts/catred
          
          # Test help command
          bash scripts/catred help
          
          # Test version command
          bash scripts/catred version
          
          # Test theme command
          bash scripts/catred theme
        shell: bash
      
      - name: Test configuration completeness
        run: |
          # Test that all essential configs exist
          test -d configs/nvim
          test -d configs/fish
          test -d configs/terminals
          test -d configs/window-managers
          test -d configs/status-bars
          
          # Test that terminal configs exist for all themes
          for theme in catppuccin-macchiato gruvbox tokyo-night-storm; do
            # Primary terminals (required)
            for terminal in ghostty warp; do
              found=false
              for ext in conf yml yaml config; do
                if test -f "configs/terminals/$terminal/$theme.$ext"; then
                  found=true
                  break
                fi
              done
              if [ "$found" = false ]; then
                echo "Missing required terminal config: $terminal/$theme"
                exit 1
              fi
            done
            # Secondary terminals (warn if missing)
            for terminal in kitty alacritty; do
              found=false
              for ext in conf yml yaml config; do
                if test -f "configs/terminals/$terminal/$theme.$ext"; then
                  found=true
                  break
                fi
              done
              if [ "$found" = false ]; then
                echo "Warning: Missing optional terminal config: $terminal/$theme"
              fi
            done
          done
        shell: bash
      
      - name: Test documentation
        run: |
          test -f README.md
          test -f CLAUDE.md
          test -f SPECIFICATION.md
          test -f tests/README.md
        shell: bash

  # Run Full Test Suite
  full-test-suite:
    name: Full Test Suite
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up test environment
        run: |
          sudo apt-get update
          sudo apt-get install -y stow yamllint jq
      
      - name: Run complete test suite
        run: |
          chmod +x tests/test_framework.sh
          chmod +x tests/unit/*.sh
          chmod +x tests/integration/*.sh
          ./tests/test_framework.sh
      
      - name: Run configuration validation
        run: |
          # Validate YAML files
          find configs -name "*.yaml" -o -name "*.yml" | xargs yamllint -d relaxed
          
          # Validate JSON files
          find configs -name "*.json" | xargs -I {} jq empty {}
      
      - name: Run security scan
        run: |
          # Check for security issues
          find scripts -name "*.sh" -exec grep -H "eval.*\$" {} \; | tee security_issues.txt
          find scripts -name "*.sh" -exec grep -H "curl.*|.*sh" {} \; | tee -a security_issues.txt
          find scripts -name "*.sh" -exec grep -H "rm -rf /" {} \; | tee -a security_issues.txt
          
          if [ -s security_issues.txt ]; then
            echo "Security issues found:"
            cat security_issues.txt
            exit 1
          fi
          
          echo "No security issues found"

  # Generate Release Assets
  generate-assets:
    name: Generate Release Assets
    needs: [create-release, test-release, full-test-suite]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create installation archives
        run: |
          # Create main archive
          tar -czf catred-config-${{ github.ref_name }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='tests' \
            --exclude='*.log' \
            --exclude='*.html' \
            .
          
          # Create source archive
          tar -czf catred-config-${{ github.ref_name }}-source.tar.gz \
            --exclude='.git' \
            .
          
          # Create checksums
          sha256sum catred-config-${{ github.ref_name }}.tar.gz > catred-config-${{ github.ref_name }}.tar.gz.sha256
          sha256sum catred-config-${{ github.ref_name }}-source.tar.gz > catred-config-${{ github.ref_name }}-source.tar.gz.sha256
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./catred-config-${{ github.ref_name }}.tar.gz
          asset_name: catred-config-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Source Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./catred-config-${{ github.ref_name }}-source.tar.gz
          asset_name: catred-config-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./catred-config-${{ github.ref_name }}.tar.gz.sha256
          asset_name: catred-config-${{ github.ref_name }}.tar.gz.sha256
          asset_content_type: text/plain

  # Post-Release Validation
  post-release-validation:
    name: Post-Release Validation
    needs: [generate-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate release completeness
        run: |
          echo "✅ Release ${{ github.ref_name }} completed successfully!"
          echo "📦 Assets generated and uploaded"
          echo "🧪 All tests passed"
          echo "🔒 Security scan completed"
          echo "📋 Documentation validated"
          echo "🎨 Theme consistency verified"
          echo "⚡ Performance tests passed"
          
          # Output release summary
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: macOS, Linux, Windows" >> $GITHUB_STEP_SUMMARY
          echo "- **Themes**: Catppuccin Macchiato, Gruvbox, Tokyo Night Storm" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: All passed ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: No issues found 🔒" >> $GITHUB_STEP_SUMMARY
          echo "- **Assets**: Generated and uploaded 📦" >> $GITHUB_STEP_SUMMARY